FROM ubuntu:20.04

ENV RASPI_ARCH=arm64
ENV RASPI_HW_VERSION=rpi4
ENV RASPI_SW_VERSION=bullseye
ENV DEBIAN_FRONTEND=noninteractive 
ENV CHROOT_PATH=${RASPI_HW_VERSION}-${RASPI_SW_VERSION}-${RASPI_ARCH}
ENV TZ=Etc/UTC

RUN apt update && apt install ubuntu-dev-tools -y
# Use debootstrap too create chroot, mk-sbuild won't work
RUN apt install -y debootstrap binfmt-support
RUN debootstrap --arch=${RASPI_ARCH} --foreign ${RASPI_SW_VERSION} ${CHROOT_PATH}
# Copy QEMU Static from another container to execute ARM cmd in chrooted environment
COPY --from=multiarch/qemu-user-static /usr/bin/qemu-aarch64-static ${CHROOT_PATH}/usr/bin
# There's needed file structure when instaling dependecies with apt for boost like passwd
RUN cp /etc/passwd ${CHROOT_PATH}/etc/passwd
RUN cp /etc/group ${CHROOT_PATH}/etc/group
#
# WiringPi chroot install
#-------------------------
# chroot sh -c is the only way to execute chrooted cmd, you can't use multiple RUN once chrooted in Docker.
RUN chroot ${CHROOT_PATH} sh -c 'apt-get install libboost-all-dev libjsoncpp-dev libwebsocketpp-dev libssl-dev wget -y \
&& wget https://github.com/WiringPi/WiringPi/releases/download/2.61-1/wiringpi-2.61-1-${RASPI_ARCH}.deb --no-check-certificate \
&& dpkg -i wiringpi-2.61-1-${RASPI_ARCH}.deb'
# Add libs and needed tools for X86-64 too.
RUN apt-get install libboost-all-dev libjsoncpp-dev libwebsocketpp-dev libssl-dev wget -y
RUN apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu gdb-multiarch cmake ninja-build -y
#
ADD docker/arm64/cmake /cmake
ADD docker/arm64/run.sh /run.sh
RUN chmod +x /run.sh
ENV WORKDIR_FOLDER /workdir
ENV BUILD_FOLDER ${WORKDIR_FOLDER}/build
WORKDIR ${BUILD_FOLDER}
#cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/aarch64-rpi4-linux-gnu.cmake .. && ..cmake --build ../
CMD [ "/run.sh"]